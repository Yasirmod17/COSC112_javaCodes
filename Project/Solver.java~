import java.util.Vector;

public class Solver{
    SudokuGame game;
    Vector<Spot> unsetSpots;//=game.unsetSpots;
    int[] possibleValues;
    // Vector<Spot> unsetSpotCopy;
    int i=0;

    public Solver(SudokuGame G, Vector<Spot> u,int[] pv){
	//	for(int i=0;i<u.size();i++){
	    // System.out.println(u.size());}
	  unsetSpots=u;
	  game=G;
	  possibleValues=pv;}


    public boolean solving(/*Vector<Spot> unsetSpots,SudokuGame game,int[] possibleValues*/int i){
	int[] y=new int[2];
	if (i==this.unsetSpots.size()){
	    //    System.out.println("no!");
	    return game.Check();}
	//	System.out.println("yyy");
	for(int j=0; j<this.possibleValues.length;j++){
	    Spot x=this.unsetSpots.elementAt(i);
	     y=x.getArray();
	    game.add(y[0],y[1],possibleValues[j]);
	    boolean check=game.Check();
	    if (check){
		//	System.out.println("working");
		if (solving(/*unsetSpots,game,possibleValues,*/i+1)){
			return true;
		    }
	    }}
	game.add(y[0],y[1],0);
	return false;}
}	